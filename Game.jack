class Game
{
  field int MAX_ENEMIES, ENEMY_SPEED, PLAYER_SPEED;
  field Rect player;
  field Array enemies;
  field boolean running;
  // Direction in which the player moves
  // 1 = up, 2 = right, etc.
  // Standing still is not possible in this game
  field int playerDirection, ticks;

  constructor Game new()
  {
    var int i;
    var Rect rect;

    let MAX_ENEMIES   = 10;
    let ENEMY_SPEED   = 2;
    let PLAYER_SPEED  = 2;

    let player = Rect.new(0, 0, 20, 20);
    let enemies = Array.new(MAX_ENEMIES);
    let running = true;
    let playerDirection = 2;
    let ticks = 0;

    let i = 0;
    while (i < MAX_ENEMIES)
    {
      let rect =  Rect.new(-100 , -100, 25, 25);
      do rect.isEnemy(true);
      let enemies[i] = rect;
      let i = i + 1;
    }
    return this;
  }

  method void dispose()
  {
    do enemies.dispose();
    do Memory.deAlloc(this);
    return;
  }

  method void clock()
  {
    let ticks = ticks + 1;
    if (ticks > 20000) {
      let ticks = 0;
    }
    return;
  }

  method void handleInputs()
  {
    var char key;

    let key = Keyboard.keyPressed();

    if (key = 81) {
      let running = false;
    }
    if (key = 131) {
      let playerDirection = 1;
    }
    if (key = 132) {
      let playerDirection = 2;
    }
    if (key = 133) {
      let playerDirection = 3;
    }
    if (key = 130) {
      let playerDirection = 4;
    }
    return;
  }

  method void gameLogic()
  {
    if (player.getX() < 0) {
      let playerDirection = 2;
    }
    if (player.getY() < 0) {
      let playerDirection = 3;
    }
    if ((player.getX() + player.getWidth()) > 511) {
      let playerDirection = 4;
    }
    if ((player.getY() + player.getHeight()) > 255) {
      let playerDirection = 1;
    }
    if (playerDirection = 1) {
      do player.moveUp(PLAYER_SPEED);
    }
    if (playerDirection = 2) {
      do player.moveRight(PLAYER_SPEED);
    }
    if (playerDirection = 3) {
      do player.moveDown(PLAYER_SPEED);
    }
    if (playerDirection = 4) {
      do player.moveLeft(PLAYER_SPEED);
    }
    return;
  }

  method void render()
  {
    var int i;
    var Rect rect;

    do player.draw();

    let i = 0;
    while (i < MAX_ENEMIES)
    {
      let rect = enemies[i];
      do rect.draw();
      let i = i + 1;
    }
    return;
  }

  method void run()
  {
    while (running)
    {
      do handleInputs();
      do clock();
      do gameLogic();
      do Screen.clearScreen();
      do render();
      do Sys.wait(20);
    }
    return;
  }
}
